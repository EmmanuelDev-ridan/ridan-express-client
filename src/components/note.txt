import React, { useEffect, useState, useRef } from 'react';
import { GrMail } from 'react-icons/gr';
import ridanLogo from "../assets/Images/banner/logo.png";
import ridanLogo2 from "../assets/Images/banner/logo2.png";
import MenuIcon from '@mui/icons-material/Menu';
import { Link, useNavigate } from 'react-router-dom';
import { useSelector, useDispatch } from 'react-redux';
import { FaLinkedinIn, FaFacebookF, FaUser, FaShoppingCart } from 'react-icons/fa';
import { AiOutlineTwitter, AiFillGithub, AiOutlineSearch } from 'react-icons/ai';
import ExpandMoreSharpIcon from '@mui/icons-material/ExpandMoreSharp';
import ShoppingCartOutlinedIcon from '@mui/icons-material/ShoppingCartOutlined';
import { get_card_products, get_wishlist_products } from '../store/reducers/cardReducer';
import SupportAgentIcon from '@mui/icons-material/SupportAgent';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import LoginIcon from '@mui/icons-material/Login';
import CloseIcon from '@mui/icons-material/Close';
import CircularProgress from '@mui/material/CircularProgress';

const Headers = () => {
    const dispatch = useDispatch();
    const navigate = useNavigate();
    const { categorys } = useSelector(state => state.home);
    const { userInfo } = useSelector(state => state.auth);
    const { card_product_count } = useSelector(state => state.card);

    const [showSidebar, setShowSidebar] = useState(false);
    const [searchValue, setSearchValue] = useState('');
    const [isScrolled, setIsScrolled] = useState(false);
    const [suggestions, setSuggestions] = useState([]);
    const [showSuggestions, setShowSuggestions] = useState(false);
    const [activeSuggestion, setActiveSuggestion] = useState(0);
    const [showMobileSearch, setShowMobileSearch] = useState(false);
    const [isLoading, setIsLoading] = useState(false);
    const searchRef = useRef(null);
    const mobileSearchInputRef = useRef(null);

    // Debounce function
    const debounce = (func, delay) => {
        let timeoutId;
        return (...args) => {
            clearTimeout(timeoutId);
            timeoutId = setTimeout(() => func.apply(this, args), delay);
        };
    };

    const fetchSuggestions = debounce(async (query) => {
        if (query.trim().length < 2) {
            setSuggestions([]);
            setIsLoading(false);
            return;
        }

        setIsLoading(true);
        try {
            const response = await fetch(
                `/api/home/search-suggestions?q=${encodeURIComponent(query)}`,
                { headers: { 'Accept': 'application/json' } }
            );

            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);

            const data = await response.json();
            setSuggestions(data.suggestions || []);
            setShowSuggestions(true);
        } catch (error) {
            console.error('Error:', error);
            setSuggestions([]);
        } finally {
            setIsLoading(false);
        }
    }, 300);

    const handleInputChange = (e) => {
        const value = e.target.value;
        setSearchValue(value);
        fetchSuggestions(value);
    };

    const handleSuggestionClick = (suggestion) => {
        setSearchValue(suggestion.name);
        setShowSuggestions(false);
        setShowMobileSearch(false);
        navigate(`/products/search?q=${suggestion.name}`); // Changed from 'value' to 'q'
    };

    const search = () => {
        if (searchValue.trim()) {
            navigate(`/products/search?q=${searchValue}`); // Changed from 'value' to 'q'
            setSearchValue('');
            setShowSuggestions(false);
            setShowMobileSearch(false);
        }
    };

    // Close suggestions when clicking outside
    useEffect(() => {
        const handleClickOutside = (event) => {
            if (searchRef.current && !searchRef.current.contains(event.target)) {
                setShowSuggestions(false);
            }
        };
        document.addEventListener('mousedown', handleClickOutside);
        return () => document.removeEventListener('mousedown', handleClickOutside);
    }, []);

    // Auto-focus mobile search input when modal opens
    useEffect(() => {
        if (showMobileSearch && mobileSearchInputRef.current) {
            mobileSearchInputRef.current.focus();
        }
    }, [showMobileSearch]);

    // Scroll effect
    useEffect(() => {
        const handleScroll = () => setIsScrolled(window.scrollY > 10);
        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, []);

    // User effects
    useEffect(() => {
        if (userInfo) {
            dispatch(get_card_products(userInfo.id));
            dispatch(get_wishlist_products(userInfo.id));
        }
    }, [userInfo, dispatch]);

    return (
        <header className={`w-full bg-white ${isScrolled ? 'shadow-lg' : 'shadow-sm'} fixed top-0 z-50 transition-shadow duration-300`}>
            {/* Top Announcement Bar */}
            <div className="bg-gradient-to-r from-gray-800 to-gray-900 py-2 hidden md:block">
                <div className="container mx-auto px-4">
                    <div className="flex justify-between px-20 items-center text-white text-sm">
                        <div className="flex items-center space-x-4">
                            <span className="flex items-center hover:text-orange-100 transition-colors">
                                <GrMail className="mr-2" size={14} />
                                Sell on Ridan
                            </span>
                            <span className="text-orange-200">|</span>
                            <span className="hover:text-orange-100 transition-colors">Powered by Ridan</span>
                        </div>
                        <div className="flex items-center space-x-4">
                            <button className="flex items-center bg-white bg-opacity-20 px-3 py-1 rounded-full hover:bg-opacity-30 transition-all">
                                <SupportAgentIcon className="mr-2" fontSize="small" />
                                <span>Ridan Support</span>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* Main Header */}
            <div className="bg-white">
                <div className="container mx-auto px-4">
                    <div className="flex items-center justify-between lg:justify-evenly py-3">
                        {/* Logo and Mobile Menu */}
                        <div className="flex items-center">
                            <button
                                className="md:hidden p-2 rounded-lg hover:bg-gray-100 transition-colors"
                                onClick={() => setShowSidebar(!showSidebar)}
                                aria-label="Toggle menu"
                            >
                                {showSidebar ? <CloseIcon className="text-gray-700" /> : <MenuIcon className="text-gray-700" />}
                            </button>
                            <Link to="/" className="flex items-center">
                                <img
                                    src={ridanLogo2}
                                    className="h-8 lg:h-10 mt-2 lg:mt-0 transition-all duration-200 hover:opacity-90"
                                    alt="Ridan Logo"
                                    loading="lazy"
                                />
                            </Link>
                        </div>

                        {/* Desktop Search Bar */}
                        <div className="hidden md:flex flex-1 max-w-2xl mx-6">
                            <div className="relative w-full group" ref={searchRef}>
                                <input
                                    type="text"
                                    value={searchValue}
                                    className="w-full px-5 py-2.5 pr-16 rounded-full border border-orange-800 focus:outline-none focus:ring-2 focus:ring-orange-500 focus:border-transparent transition-all duration-200 placeholder-gray-900 text-gray-800 shadow-sm hover:shadow-md"
                                    placeholder="Search products, brands & categories..."
                                    onChange={handleInputChange}
                                    onKeyDown={(e) => e.key === 'Enter' && search()}
                                    onFocus={() => searchValue.length > 0 && setShowSuggestions(true)}
                                />
                                <button
                                    onClick={search}
                                    className="absolute right-0 top-0 h-full px-5 bg-orange-500 text-white rounded-r-full font-medium hover:bg-orange-600 transition-all duration-200 flex items-center"
                                >
                                    <AiOutlineSearch className="mr-2" />
                                    <span>Search</span>
                                </button>

                                {/* Desktop Suggestions Dropdown */}
                                {showSuggestions && (
                                    <div className="absolute z-50 mt-1 w-full bg-white rounded-lg shadow-lg border border-gray-200 max-h-80 overflow-y-auto">
                                        {isLoading ? (
                                            <div className="flex justify-center p-4">
                                                <CircularProgress size={24} />
                                            </div>
                                        ) : suggestions.length > 0 ? (
                                            <ul>
                                                {suggestions.map((item, index) => (
                                                    <li
                                                        key={item._id || index}
                                                        className={`px-4 py-3 hover:bg-gray-50 cursor-pointer flex items-center ${index === activeSuggestion ? 'bg-gray-50' : ''}`}
                                                        onClick={() => handleSuggestionClick(item)}
                                                    >
                                                        <div>
                                                            <div className="font-medium text-gray-800">{item.name}</div>
                                                            <div className="flex items-center mt-1">
                                                                <span className="text-orange-500 font-semibold">
                                                                    ${item.price}
                                                                </span>
                                                            </div>
                                                        </div>
                                                    </li>
                                                ))}
                                            </ul>
                                        ) : (
                                            <div className="p-4 text-gray-500 text-center">
                                                No results found
                                            </div>
                                        )}
                                    </div>
                                )}
                            </div>
                        </div>

                        {/* Navigation Icons */}
                        <div className="flex items-center space-x-4">
                            {/* User Account Dropdown */}
                            {userInfo ? (
                                <div className="hidden md:flex items-center group relative">
                                    <button className="flex items-center space-x-1 px-3 py-2 rounded-full hover:bg-gray-100 transition-colors">
                                        <div className="w-8 h-8 rounded-full bg-orange-100 flex items-center justify-center text-orange-600">
                                            <FaUser size={14} />
                                        </div>
                                        <span className="text-sm font-medium text-gray-700">Hi, {userInfo.name.split(' ')[0]}</span>
                                        <ExpandMoreSharpIcon className="text-gray-500" fontSize="small" />
                                    </button>
                                    <div className="absolute top-full right-0 mt-1 w-48 bg-white rounded-lg shadow-lg py-1 hidden group-hover:block z-50">
                                        <Link to="/dashboard" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">My Account</Link>
                                        <Link to="/orders" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">My Orders</Link>
                                        <Link to="/wishlist" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Wishlist</Link>
                                        <Link to="/logout" className="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Sign Out</Link>
                                    </div>
                                </div>
                            ) : (
                                <Link
                                    to="/login"
                                    className="hidden md:flex items-center space-x-1 px-4 py-2 rounded-full hover:bg-gray-100 transition-colors"
                                >
                                    <div className="w-8 h-8 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
                                        <FaUser size={14} />
                                    </div>
                                    <span className="text-sm font-medium text-gray-700">Login</span>
                                </Link>
                            )}

                            {/* Cart */}
                            <button
                                onClick={() => userInfo ? navigate(`/card`) : navigate(`/login`)}
                                className="relative p-2 rounded-full hover:bg-gray-100 transition-colors"
                                aria-label="Shopping cart"
                            >
                                <ShoppingCartOutlinedIcon className="text-gray-700" />
                                {card_product_count > 0 && (
                                    <span className="absolute border-2 border-white bottom-5 left-6 bg-orange-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs font-medium">
                                        {card_product_count}
                                    </span>
                                )}
                            </button>

                            {/* Help - Desktop */}
                            <button className="hidden md:flex items-center space-x-1 px-3 py-2 rounded-full hover:bg-gray-100 transition-colors">
                                <HelpOutlineIcon className="text-gray-700" fontSize="small" />
                                <span className="text-sm font-medium text-gray-700">Help</span>
                            </button>
                        </div>
                    </div>

                    {/* Mobile Search Trigger */}
                    <div className="md:hidden mb-3">
                        <div className="relative">
                            <input
                                type="text"
                                value={searchValue}
                                className="w-full px-4 py-2.5 pr-12 rounded-full border text-gray-800 placeholder-gray-900  border-gray-500 focus:outline-none"
                                placeholder="Search products..."
                                onClick={() => setShowMobileSearch(true)}
                                readOnly
                            />
                            <button
                                onClick={() => setShowMobileSearch(true)}
                                className="absolute right-0 top-0 h-full px-3 text-gray-500"
                            >
                                <AiOutlineSearch size={20} />
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {/* Mobile Search Modal */}
            {showMobileSearch && (
                <div className="fixed inset-0 bg-white z-50 p-4">
                    <div className="flex items-center mb-4">
                        <button
                            onClick={() => {
                                setShowMobileSearch(false);
                                setShowSuggestions(false);
                            }}
                            className="mr-2 p-2"
                        >
                            <CloseIcon className='text-red-600' />
                        </button>
                        <div className="relative flex-1">
                            <input
                                ref={mobileSearchInputRef}
                                type="text"
                                value={searchValue}
                                className="w-full px-4 text-gray-800 py-3 rounded-full border border-orange-500 focus:outline-none focus:ring-2 focus:ring-orange-500"
                                placeholder="Search products..."
                                onChange={handleInputChange}
                                onKeyDown={(e) => e.key === 'Enter' && search()}
                            />
                            <button
                                onClick={search}
                                className="absolute right-0 top-0 h-full px-4 text-gray-500"
                            >
                                <AiOutlineSearch size={20} />
                            </button>
                        </div>
                    </div>

                    {/* Mobile Suggestions List */}
                    <div className="mt-4">
                        {isLoading ? (
                            <div className="flex justify-center p-4">
                                <CircularProgress size={50} />
                            </div>
                        ) : suggestions.length > 0 ? (
                            <ul className="divide-y divide-gray-200">
                                {suggestions.map((item, index) => (
                                    <li
                                        key={item._id || index}
                                        className="py-3 px-2 hover:bg-gray-50 cursor-pointer"
                                        onClick={() => handleSuggestionClick(item)}
                                    >
                                        <div className="flex items-center">
                                            <div>
                                                <div className="font-medium text-black">{item.name}</div>
                                            </div>
                                        </div>
                                    </li>
                                ))}
                            </ul>
                        ) : (
                            <p className="text-gray-500 text-center py-4">
                                {searchValue.length > 0 ? 'No results found' : 'Start typing to search'}
                            </p>
                        )}
                    </div>
                </div>
            )}

            {/* Mobile Sidebar Menu */}
            {showSidebar && (
                <div className="md:hidden fixed inset-0 z-40">
                    <div
                        onClick={() => setShowSidebar(false)}
                        className="fixed inset-0 bg-black/50 transition-opacity"
                    ></div>
                    <div className="fixed top-0 left-0 h-full w-80 bg-white z-50 shadow-xl">
                        <div className="h-full flex flex-col">
                            {/* Sidebar Header */}
                            <div className="flex items-center justify-between p-4 border-b">
                                <Link to="/" onClick={() => setShowSidebar(false)}>
                                    <img src={ridanLogo} className="h-8" alt="Ridan Logo" />
                                </Link>
                                <button
                                    onClick={() => setShowSidebar(false)}
                                    className="p-2 rounded-full hover:bg-gray-100"
                                >
                                    <CloseIcon />
                                </button>
                            </div>

                            {/* User Section */}
                            <div className="p-4 border-b">
                                {userInfo ? (
                                    <Link
                                        to="/dashboard"
                                        className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100"
                                        onClick={() => setShowSidebar(false)}
                                    >
                                        <div className="w-10 h-10 rounded-full bg-orange-100 flex items-center justify-center text-orange-600">
                                            <FaUser size={16} />
                                        </div>
                                        <div>
                                            <div className="font-medium text-gray-900">{userInfo.name}</div>
                                            <div className="text-xs text-gray-500">View your account</div>
                                        </div>
                                    </Link>
                                ) : (
                                    <Link
                                        to="/login"
                                        className="flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-100"
                                        onClick={() => setShowSidebar(false)}
                                    >
                                        <div className="w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center text-gray-600">
                                            <FaUser size={16} />
                                        </div>
                                        <div>
                                            <div className="font-medium text-gray-900">Login / Register</div>
                                            <div className="text-xs text-gray-500">Access account features</div>
                                        </div>
                                    </Link>
                                )}
                            </div>

                            {/* Categories Section */}
                            <div className="flex-1 overflow-y-auto p-4">
                                <h3 className="font-bold text-lg mb-3 text-gray-800">Shop Categories</h3>
                                <ul className="space-y-2">
                                    {categorys.map((c, i) => (
                                        <li key={i}>
                                            <Link
                                                to={`/products?category=${c.name}`}
                                                className="flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-100 transition-colors"
                                                onClick={() => setShowSidebar(false)}
                                            >
                                                <img
                                                    src={c.image}
                                                    className="w-8 h-8 rounded-full object-cover"
                                                    alt={c.name}
                                                    loading="lazy"
                                                />
                                                <span className="text-gray-700">{c.name}</span>
                                            </Link>
                                        </li>
                                    ))}
                                </ul>
                            </div>

                            {/* Footer Links */}
                            <div className="p-4 border-t">
                                <div className="grid grid-cols-2 gap-2">
                                    <Link to="/help" className="p-2 text-sm text-gray-600 hover:text-orange-500">Help Center</Link>
                                    <Link to="/about" className="p-2 text-sm text-gray-600 hover:text-orange-500">About Us</Link>
                                    <Link to="/contact" className="p-2 text-sm text-gray-600 hover:text-orange-500">Contact</Link>
                                    <Link to="/terms" className="p-2 text-sm text-gray-600 hover:text-orange-500">Terms</Link>
                                </div>
                                <div className="flex justify-center space-x-4 mt-4">
                                    <a href="#" className="p-2 text-gray-500 hover:text-orange-500"><FaFacebookF /></a>
                                    <a href="#" className="p-2 text-gray-500 hover:text-orange-500"><AiOutlineTwitter /></a>
                                    <a href="#" className="p-2 text-gray-500 hover:text-orange-500"><FaLinkedinIn /></a>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </header>
    );
};

export default Headers;

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


REDUCER Home

----------------------------

const categoryModel = require('../../models/categoryModel')
const productModel = require('../../models/productModel')
const queryProducts = require('../../utiles/queryProducts')
const reviewModel = require('../../models/reviewModel')
const moment = require('moment')
const {
    mongo: {
        ObjectId
    }
} = require('mongoose')

const {
    responseReturn
} = require('../../utiles/response')
class homeControllers {

    formateProduct = (products) => {
        const productArray = [];
        let i = 0;
        while (i < products.length) {
            let temp = []
            let j = i
            while (j < i + 3) {
                if (products[j]) {
                    temp.push(products[j])
                }
                j++
            }
            productArray.push([...temp])
            i = j
        }
        return productArray
    }
    get_categorys = async (req, res) => {
        try {
            const categorys = await categoryModel.find({})
            responseReturn(res, 200, {
                categorys
            })
        } catch (error) {
            console.log(error.message)
        }
    }

    get_products = async (req, res) => {
        try {
            const products = await productModel.find({}).limit(16).sort({
                createdAt: -1
            })
            const allProduct1 = await productModel.find({}).limit(9).sort({
                createdAt: -1
            })
            const latest_product = this.formateProduct(allProduct1);
            const allProduct2 = await productModel.find({}).limit(9).sort({
                rating: -1
            })
            const topRated_product = this.formateProduct(allProduct2);
            const allProduct3 = await productModel.find({}).limit(9).sort({
                discount: -1
            })
            const discount_product = this.formateProduct(allProduct3);

            responseReturn(res, 200, {
                products,
                latest_product,
                topRated_product,
                discount_product
            })
        } catch (error) {
            console.log(error.message)
        }
    }

    get_product = async (req, res) => {
        const {
            slug
        } = req.params
        try {
            const product = await productModel.findOne({
                slug
            })
            const relatedProducts = await productModel.find({
                $and: [{
                    _id: {
                        $ne: product.id
                    }
                },
                {
                    category: {
                        $eq: product.category
                    }
                }
                ]
            }).limit(20)
            const moreProducts = await productModel.find({

                $and: [{
                    _id: {
                        $ne: product.id
                    }
                },
                {
                    sellerId: {
                        $eq: product.sellerId
                    }
                }
                ]
            }).limit(3)
            responseReturn(res, 200, {
                product,
                relatedProducts,
                moreProducts
            })
        } catch (error) {
            console.log(error.message)
        }
    }

    price_range_product = async (req, res) => {
        try {
            const priceRange = {
                low: 0,
                high: 0
            }
            const products = await productModel.find({}).limit(9).sort({
                createdAt: -1
            })
            const latest_product = this.formateProduct(products);
            const getForPrice = await productModel.find({}).sort({
                'price': 1
            })
            if (getForPrice.length > 0) {
                priceRange.high = getForPrice[getForPrice.length - 1].price
                priceRange.low = getForPrice[0].price
            }
            responseReturn(res, 200, {
                latest_product,
                priceRange
            })
        } catch (error) {
            console.log(error.message)
        }
    }

    query_products = async (req, res) => {
        const parPage = 12
        req.query.parPage = parPage
        try {
            const products = await productModel.find({}).sort({
                createdAt: -1
            })
            const totalProduct = new queryProducts(products, req.query).categoryQuery().searchQuery().priceQuery().ratingQuery().sortByPrice().countProducts();

            const result = new queryProducts(products, req.query).categoryQuery().searchQuery().ratingQuery().priceQuery().sortByPrice().skip().limit().getProducts();

            responseReturn(res, 200, {
                products: result,
                totalProduct,
                parPage
            })

        } catch (error) {
            console.log(error.message)
        }
    }

    search_suggestions = async (req, res) => {
        try {
            const { q } = req.query;
            console.log('Search query:', q);  // 👈 Debug log

            if (!q || q.length < 2) {
                return res.json({ suggestions: [] });
            }

            const products = await productModel.find({
                $or: [
                    { name: { $regex: q, $options: 'i' } },
                    { description: { $regex: q, $options: 'i' } }
                ]
            }, 'name slug image price discount')
                .limit(5)
                .lean();

            console.log('Found products:', products);  // 👈 Debug log
            res.json({ suggestions: products });
        } catch (error) {
            console.error('Error:', error);
            res.status(500).json({ error: 'Server error' });
        }
    };
    
    submit_review = async (req, res) => {
        const {
            name,
            rating,
            review,
            productId
        } = req.body
        console.log(req.body)
        try {
            await reviewModel.create({
                productId,
                name,
                rating,
                review,
                date: moment(Date.now()).format('LL')
            })

            let rat = 0;
            const reviews = await reviewModel.find({
                productId
            });
            for (let i = 0; i < reviews.length; i++) {
                rat = rat + reviews[i].rating
            }
            let productRating = 0;

            if (reviews.length !== 0) {
                productRating = (rat / reviews.length).toFixed(1)
            }

            await productModel.findByIdAndUpdate(productId, {
                rating: productRating
            })

            responseReturn(res, 201, {
                message: "Review Success"
            })
        } catch (error) {
            console.log(error)
        }
    }

    get_reviews = async (req, res) => {
        const {
            productId
        } = req.params
        let {
            pageNo
        } = req.query
        pageNo = parseInt(pageNo)
        const limit = 5
        const skipPage = limit * (pageNo - 1)
        try {
            let getRating = await reviewModel.aggregate([{
                $match: {
                    productId: {
                        $eq: new ObjectId(productId)
                    },
                    rating: {
                        $not: {
                            $size: 0
                        }
                    }
                }
            },
            {
                $unwind: "$rating"
            },
            {
                $group: {
                    _id: "$rating",
                    count: {
                        $sum: 1
                    }
                }
            }
            ])
            let rating_review = [{
                rating: 5,
                sum: 0
            },
            {
                rating: 4,
                sum: 0
            },
            {
                rating: 3,
                sum: 0
            },
            {
                rating: 2,
                sum: 0
            },
            {
                rating: 1,
                sum: 0
            }
            ]
            for (let i = 0; i < rating_review.length; i++) {
                for (let j = 0; j < getRating.length; j++) {
                    if (rating_review[i].rating === getRating[j]._id) {
                        rating_review[i].sum = getRating[j].count
                        break
                    }
                }
            }
            const getAll = await reviewModel.find({
                productId
            })
            const reviews = await reviewModel.find({
                productId
            }).skip(skipPage).limit(limit).sort({
                createdAt: -1
            })
            responseReturn(res, 200, {
                reviews,
                totalReview: getAll.length,
                rating_review
            })
        } catch (error) {
            console.log(error)
        }
    }
}

module.exports = new homeControllers() "